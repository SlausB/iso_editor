<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ie="ie.*"
			   addedToStage="onInit()" >
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<mx:MenuBar id="_menuBar" labelField="@label" percentWidth="100" itemClick="onMenuItem(event)" >
		<fx:XMLList>
			<menuitem label="File" >
				<menuitem label="Open project..." id="open_project" />
				<menuitem label="Save project" id="save_project" enabled="false" />
				<menuitem label="Save project as..." id="save_project_as" />
			</menuitem>
			
			<menuitem label="Project" >
				<menuitem label="Properties..." id="project_properties" />
			</menuitem>
			
			<menuitem label="Help" >
				<menuitem label="About" id="about" />
			</menuitem>
		</fx:XMLList>
	</mx:MenuBar>
	
	<!-- everything below menu: -->
	<mx:HDividedBox percentWidth="100" percentHeight="100" >
		
		<mx:VBox percentWidth="70" percentHeight="100" >
			
			<s:Group percentWidth="100" height="54" >
				<s:BorderContainer id="_mapPropertiesArea" x="6" percentWidth="100" percentHeight="100" enabled="false" >
					<s:Label x="10" y="10" text="Tile X:" />
					<s:Label x="60" y="10" id="_isoTileX" text="N/A" />
					
					<s:Label x="10" y="30" text="Tile Y:" />
					<s:Label x="60" y="30" id="_isoTileY" text="N/A" />
					
					<s:Label x="100" y="10" text="Draw border:" />
					<s:CheckBox x="180" y="5" id="_drawBorder" change="onDrawBorderFlagChange(event)" />
					
					<s:Label x="100" y="30" text="Draw grid:" />
					<s:CheckBox x="162" y="25" id="_drawGrid" change="onDrawGridFlagChange(event)" />
					
					<s:Label x="220" y="10" text="Clamp to tile:" />
					<s:CheckBox x="300" y="5" id="_clampToTile" change="onClampToTileFlagChange(event)" />
					
					<s:Label x="220" y="30" text="Units speed:" />
					<s:TextInput x="300" y="25" text="N/A" id="_unitsSpeed" restrict="-1234567890." change="onUnitsSpeedChange(event)" />
					
					<s:Label x="350" y="10" text="Scale:" />
					<s:HGroup x="390" y="4" >
						<s:RadioButton id="_scale_1" width="30" groupName="scale" label="x1" click="onScale_1(event)" />
						<s:RadioButton id="_scale_2" width="30" groupName="scale" label="x2" click="onScale_2(event)" />
						<s:RadioButton id="_scale_3" width="30" groupName="scale" label="x3" click="onScale_3(event)" />
						<s:RadioButton id="_scale_4" width="30" groupName="scale" label="x4" click="onScale_4(event)" />
					</s:HGroup>
					
					<s:VGroup x="550" y="4" >
						<s:RadioButton id="_tipGraphics" groupName="tip" label="Graphics" selected="true" />
						<s:RadioButton id="_tipSpace" groupName="tip" label="Space" />
					</s:VGroup>
					
					<s:Button id="_reloadMapButton" x="640" y="4" label="Reload" toolTip="Recreate isometric objects accordingly last changes within templates and compounds" click="onReloadMap(event)" enabled="false" />
				</s:BorderContainer>
			</s:Group>
			
			<mx:VDividedBox percentWidth="100" percentHeight="100" >
				
				<s:Group percentWidth="100" percentHeight="80" dragEnter="onIsometryDragEnter(event)" dragOver="onIsometryDragOver(event)" dragDrop="onIsometryDragDrop(event)" >
					<ie:Isometry id="_isometry" percentWidth="100" percentHeight="100" />
				</s:Group>
				
				<s:Scroller percentWidth="100" percentHeight="20" >
					<s:Group id="_resources_preview_holder" resize="onResourcesPreviewHolderResize(event)" />
				</s:Scroller>
				
			</mx:VDividedBox>
		</mx:VBox>
		
		<mx:VDividedBox percentWidth="30" percentHeight="100" >
			<s:Group percentWidth="100" percentHeight="20" >
				<s:Rect percentWidth="100" percentHeight="100" >
					<s:stroke>
						<s:SolidColorStroke color="0x000000" weight="2" />
					</s:stroke>
				</s:Rect>
				
				<ie:IsometricPreview id="_isometricPreview" />
			</s:Group>
			
			<mx:Accordion percentWidth="100" percentHeight="80" creationPolicy="all" >
				
				<mx:VBox label="Resources" percentWidth="100" percentHeight="100" >
					<s:List id="_resources_list" percentWidth="100" percentHeight="100" borderVisible="false" changing="onResourceChoice(event)" contextMenu="onResourcesContextMenu(event)" >
						<s:ArrayList id="_resources_list_data_provider" />
					</s:List>
				</mx:VBox>
				
				<mx:VBox label="Templates" percentWidth="100" percentHeight="100" >
					<s:DataGrid id="_templates_table" percentWidth="100" percentHeight="100" borderVisible="false" contextMenu="onTemplatesContextMenu(event)" mouseDown="onTemplatesMouseDown(event)" mouseUp="onTemplatesMouseUp(event)" mouseMove="onTemplatesMouseMove(event)" selectionChanging="onTemplateChoice(event)" >
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="name" headerText="Name" />
								<s:GridColumn dataField="used" headerText="Used" width="60" />
								<s:GridColumn headerText="View" sortable="false" width="60" >
									<s:itemRenderer>
										<fx:Component>
											<s:GridItemRenderer>
												<s:SpriteVisualElement id="_view" />
												<fx:Script>
													<![CDATA[
	import com.junkbyte.console.Cc;
	import utils.Utils;
														override public function prepare( hasBeenRecycled:Boolean ): void
														{
															if ( data != null )
															{
																Utils.RemoveAllChildren( _view );
																var view:flash.display.DisplayObject = data.view;
																Utils.CenterItself( view );
																view.y += 13;
																view.x += 4 + ( view.getBounds( view ).width / 2.0 );
																_view.addChild( view );
															}
														}
													]]>
												</fx:Script>
											</s:GridItemRenderer>
										</fx:Component>
									</s:itemRenderer>
								</s:GridColumn>
							</s:ArrayList>
						</s:columns>
						<mx:ArrayCollection />
					</s:DataGrid>
				</mx:VBox>
				
				<mx:VBox label="Compounds" percentWidth="100" percentHeight="100" >
					<s:DataGrid id="_compounds_table" percentWidth="100" percentHeight="100" borderVisible="false" contextMenu="onCompoundsContextMenu(event)" mouseDown="onCompoundsMouseDown(event)" mouseUp="onCompoundsMouseUp(event)" mouseMove="onCompoundsMouseMove(event)" selectionChanging="onCompoundsChoice(event)" >
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="name" headerText="Name" />
								<s:GridColumn dataField="used" headerText="Used" width="60" />
								<s:GridColumn headerText="View" sortable="false" width="60" >
									<s:itemRenderer>
										<fx:Component>
											<s:GridItemRenderer>
												<s:SpriteVisualElement id="_view" />
												<fx:Script>
													<![CDATA[
	import com.junkbyte.console.Cc;
	import utils.Utils;
														override public function prepare( hasBeenRecycled:Boolean ): void
														{
															if ( data != null )
															{
																Utils.RemoveAllChildren( _view );
																var view:flash.display.DisplayObject = data.view;
																Utils.CenterItself( view );
																view.y += 13;
																view.x += 4 + ( view.getBounds( view ).width / 2.0 );
																_view.addChild( view );
															}
														}
													]]>
												</fx:Script>
											</s:GridItemRenderer>
										</fx:Component>
									</s:itemRenderer>
								</s:GridColumn>
							</s:ArrayList>
						</s:columns>
						<mx:ArrayCollection />
					</s:DataGrid>
				</mx:VBox>
				
				<mx:VBox label="Units" percentWidth="100" percentHeight="100" >
					<s:List id="_units_list" percentWidth="100" percentHeight="100" borderVisible="false" changing="onUnitChoice(event)" mouseDown="onUnitsMouseDown(event)" mouseUp="onUnitsMouseUp(event)" mouseMove="onUnitsMouseMove(event)" >
						<s:ArrayList id="_units_list_data_provider" />
					</s:List>
				</mx:VBox>
				
				<mx:VBox label="Maps" percentWidth="100" percentHeight="100" >
					<s:List id="_maps_list" percentWidth="100" percentHeight="100" borderVisible="false" changing="onMapsChoice(event)" contextMenu="onMapsContextMenu(event)" >
						<s:ArrayList id="_maps_list_data_provider" />
					</s:List>
				</mx:VBox>
				
				<mx:VBox label="Layers" percentWidth="100" percentHeight="100" >
					<s:List id="_layers_list" percentWidth="100" percentHeight="100" borderVisible="false" changing="onLayersChoice(event)" contextMenu="onLayersContextMenu(event)" >
						<s:ArrayList id="_layers_list_data_provider" />
					</s:List>
				</mx:VBox>
				
				<mx:VBox id="_instanceProperties" label="Instance properties" enabled="false" paddingTop="10" paddingLeft="10" verticalGap="20" >
					<mx:VBox>
						<mx:HBox>
							<mx:Label text="Name:" />
							<mx:Label id="_objectName" />
						</mx:HBox>
					</mx:VBox>
					<mx:VBox>
						<mx:HBox >
							<mx:Text text="iso X:" />
							<mx:TextInput id="_objectIsoX" width="60" restrict="-1234567890." change="onObjectIsoXChange(event)" />
						</mx:HBox>
						<mx:HBox>
							<mx:Text text="iso Y:" />
							<mx:TextInput id="_objectIsoY" width="60" restrict="-1234567890." change="onObjectIsoYChange(event)" />
						</mx:HBox>
					</mx:VBox>
					
					<mx:VBox>
						<mx:HBox >
							<mx:Text text="tile X:" />
							<mx:TextInput id="_objectTileX" width="60" restrict="-1234567890." change="onObjectTileXChange(event)" />
						</mx:HBox>
						<mx:HBox>
							<mx:Text text="tile Y:" />
							<mx:TextInput id="_objectTileY" width="60" restrict="-1234567890." change="onObjectTileYChange(event)" />
						</mx:HBox>
					</mx:VBox>
					
					<mx:VBox>
						<mx:HBox >
							<mx:Text text="flat X:" />
							<mx:TextInput id="_objectFlatX" width="60" restrict="-1234567890." change="onObjectFlatXChange(event)" />
						</mx:HBox>
						<mx:HBox>
							<mx:Text text="flat Y:" />
							<mx:TextInput id="_objectFlatY" width="60" restrict="-1234567890." change="onObjectFlatYChange(event)" />
						</mx:HBox>
					</mx:VBox>
				</mx:VBox>
				
				<mx:VBox label="Regions" percentWidth="100" percentHeight="100" >
					<s:List id="_regions_list" percentWidth="100" percentHeight="100" borderVisible="false" changing="onRegionChoice(event)" contextMenu="onRegionContextMenu(event)" >
						<s:ArrayList />
					</s:List>
				</mx:VBox>
				
			</mx:Accordion>
			
		</mx:VDividedBox>
		
	</mx:HDividedBox>
	
	
	<fx:Script>
		<![CDATA[
import adobe.utils.CustomActions;
import blisc.Blisc;
import com.junkbyte.console.Cc;
import flash.display.DisplayObject;
import flash.display.DisplayObjectContainer;
import flash.display.InteractiveObject;
import flash.display.Loader;
import flash.display.LoaderInfo;
import flash.errors.IOError;
import flash.events.ContextMenuEvent;
import flash.events.Event;
import flash.events.IOErrorEvent;
import flash.events.KeyboardEvent;
import flash.events.MouseEvent;
import flash.events.SecurityErrorEvent;
import flash.filesystem.File;
import flash.filesystem.FileMode;
import flash.filesystem.FileStream;
import flash.geom.Point;
import flash.net.FileFilter;
import flash.net.FileReference;
import flash.net.URLLoader;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.ui.ContextMenu;
import flash.utils.ByteArray;
import flash.utils.getQualifiedClassName;
import ie.EditingLayerWindow;
import ie.EditingMapWindow;
import ie.EditingProjectWindow;
import ie.EditingRegionWindow;
import ie.EditingTemplateWindow;
import list_items.CompoundTableItem;
import list_items.LayerListItem;
import list_items.ListItem;
import list_items.MapListItem;
import list_items.RegionListItem;
import list_items.TemplateTableItem;
import list_items.UnitListItem;
import mx.collections.ArrayList;
import mx.containers.TitleWindow;
import mx.controls.Alert;
import mx.controls.List;
import mx.controls.Menu;
import mx.core.DragSource;
import mx.core.FlexTextField;
import mx.core.UIComponent;
import mx.events.DragEvent;
import mx.events.IndexChangedEvent;
import mx.events.MenuEvent;
import mx.managers.DragManager;
import mx.managers.PopUpManager;
import org.bytearray.explorer.SWFExplorer;
import org.osmf.media.LoadableElementBase;
import project_data.ComplexTemplate;
import project_data.CompoundTemplate;
import project_data.Layer;
import project_data.Map;
import project_data.Region;
import project_data.Resource;
import ru.etcs.utils.getDefinitionNames;
import spark.components.DataGroup;
import spark.components.gridClasses.GridItemRenderer;
import spark.components.gridClasses.IGridItemRenderer;
import spark.components.Label;
import spark.core.IContentLoader;
import spark.events.GridSelectionEvent;
import spark.events.IndexChangeEvent;
import spark.skins.spark.DefaultItemRenderer;
import utils.Utils;
import view.Projection;

		public var _projectPath:String = null;
		
		public var _project:Project;
		
		public var _resourcesPreview:ResourcesPreview = new ResourcesPreview;
		
		/** Currently displayed map and layers of which are displayed within "layers list".*/
		public var _chosenMap:Map = null;
		
		public var _ctrlDown:Boolean = false;
		public var _qDown:Boolean = false;
		
		/** Is it need to clamp complex templates within compound editing window.*/
		public static var _clampTemplatesToTile:Boolean = false;
		
		/** Currently opened editing window if not null.*/
		public var editingTemplateWindow:EditingTemplateWindow = null;
		
		/** Last chosen surface and space to prechoose it when window is displayed. Null if no such.*/
		public var _lastSurface:Region = null;
		public var _lastSpace:Region = null;
		
		
		public function onInit( ... args ): void
		{
			_project = new Project( this );
			
			Cc.config.commandLineAllowed = true; // Enables full commandLine features
			Cc.config.maxLines = 3000; // change maximum log lines to 3000, default is 1000
			Cc.config.defaultStackDepth = 10;
			Cc.startOnStage( stage, "`" );
			//width and hight can be settled only AFTER console is shown:
			Cc.width = 700;
			Cc.height = 400;
			
			_resources_preview_holder.addElement( _resourcesPreview );
			
			_isometry.Init( _project, this );
			
			stage.addEventListener( KeyboardEvent.KEY_DOWN, onKeyboardEvent );
			stage.addEventListener( KeyboardEvent.KEY_UP, onKeyboardEvent );
		}
		
		private function onKeyboardEvent( e:KeyboardEvent ): void
		{
			_ctrlDown = e.ctrlKey;
			
			switch ( e.keyCode )
			{
				//q:
				case 81:
					_qDown = e.type == KeyboardEvent.KEY_DOWN;
					break;
				
				//del:
				case 46:
					//remove currently selected complex within compound editing window:
					if ( editingTemplateWindow != null )
					{
						if ( editingTemplateWindow._compound != null )
						{
							if ( editingTemplateWindow._lastDragged != null )
							{
								editingTemplateWindow._lastDragged.parent.removeChild( editingTemplateWindow._lastDragged );
								
								for ( var i:int = 0; i < editingTemplateWindow._templates.length; ++i )
								{
									if ( editingTemplateWindow._templates[ i ] == editingTemplateWindow._lastDragged )
									{
										editingTemplateWindow._templates.splice( i, 1 );
										break;
									}
								}
								
								editingTemplateWindow._lastDragged = null;
							}
						}
					}
					//remove currently selected object from map:
					else if ( _isometry._selected != null && _isometry.displaying != null )
					{
						var selected:IsometryObject = _isometry._selected;
						//remove from displaying:
						for ( var isometryObjectIndex:int = 0; isometryObjectIndex < _isometry._isometryObjects.length; ++isometryObjectIndex )
						{
							if ( _isometry._isometryObjects[ isometryObjectIndex ] == selected )
							{
								_isometry._isometryObjects.splice( isometryObjectIndex, 1 );
								break;
							}
						}
						//remove from map's objects:
						for ( var mapObjectIndex:int = 0; mapObjectIndex < _isometry.displaying._instances.length; ++mapObjectIndex )
						{
							if ( _isometry.displaying._instances[ mapObjectIndex ] == selected._objectInstance )
							{
								_isometry.displaying._instances.splice( mapObjectIndex, 1 );
								break;
							}
						}
						selected.Deselect();
						if ( _isometry._over == selected )
						{
							_isometry._over.Out();
							_isometry._over = null;
						}
						
						if ( selected._objectInstance._template is CompoundTemplate )
						{
							var compoundTableItem:CompoundTableItem = ListItem.FindListItem( selected._objectInstance._template, _compounds_table.dataProvider ) as CompoundTableItem;
							if ( compoundTableItem == null )
							{
								Cc.error( "E: Main.onKeyboardEvent(): del: CompoundTableItem was NOT found." );
							}
							else
							{
								compoundTableItem.UpdateUsage( this );
								_compounds_table.dataProvider.itemUpdated( compoundTableItem );
							}
						}
						
						selected.Destroy();
						_isometry._selected = null;
					}
					break;
			}
		}
		
		public function onResourceChoice( e:IndexChangeEvent ): void
		{
			var resource:Resource = ( ( e.target as spark.components.List ).dataProvider as ArrayList ).source[ e.newIndex ].resource as Resource;
			_resourcesPreview.Display( resource, _project );
		}
		public function onTemplateChoice( e:GridSelectionEvent ): void
		{
			var templateTableItem:TemplateTableItem = _templates_table.dataProvider.getItemAt( e.selectionChange.rowIndex ) as TemplateTableItem;
			_isometricPreview.Display( templateTableItem.template, _project );
		}
		public function onCompoundsChoice( e:GridSelectionEvent ): void
		{
			var compoundTableItem:CompoundTableItem = _compounds_table.dataProvider.getItemAt( e.selectionChange.rowIndex ) as CompoundTableItem;
			_isometricPreview.Display( compoundTableItem.compound, _project );
		}
		public function onUnitChoice( e:IndexChangeEvent ): void
		{
			trace( "unit" );
		}
		public function onMapsChoice( e:IndexChangeEvent ): void
		{
			_chosenMap = ( ( ( e.target as spark.components.List ).dataProvider as ArrayList ).source[ e.newIndex ] as MapListItem ).map;
			_isometry.Display( _chosenMap );
		}
		public function onLayersChoice( e:IndexChangeEvent ): void
		{
			trace( "layer" );
		}
		
		public var _resourcesContextMenu:Menu = null;
		public function onResourcesContextMenu( e:MouseEvent ): void
		{
			//for now we're ignoring right clicks on resource elements (menus like "Remove" can be added at future):
			if ( ( e.target is DataGroup ) == false )
			{
				return;
			}
			
			if ( _resourcesContextMenu != null && _resourcesContextMenu.visible == true )
			{
				_resourcesContextMenu.x = e.stageX;
				_resourcesContextMenu.y = e.stageY;
				return;
			}
			_resourcesContextMenu = Menu.createMenu( null, _resourcesContextMenuData );
			_resourcesContextMenu.addEventListener( MenuEvent.ITEM_CLICK, function( menuEvent:MenuEvent ): void
			{
				switch ( menuEvent.item.id )
				{
					case "add_resource":
						_project.AddResource();
						break;
				}
			} );
			_resourcesContextMenu.show( e.stageX, e.stageY );
		}
		[Bindable]
		public var _resourcesContextMenuData:Array =
		[
			{ label:"Add resource...", id:"add_resource" }
		];
		
		private function FindListItem( e:MouseEvent, type:Class ): *
		{
			if ( e.target is spark.components.Label )
			{
				var label:spark.components.Label = e.target as spark.components.Label;
				var dir:DefaultItemRenderer = label.parent as DefaultItemRenderer;
				if ( dir == null )
				{
					Cc.error( "E: Main.FindListItem(): wrong expectations." );
					return null;
				}
				else
				{
					var looking:* = dir.data as type;
					if ( looking == null )
					{
						Cc.error( "E: Main.FindListItem(): wrong data." );
						return null;
					}
					else
					{
						return looking;
					}
				}
			}
			return null;
		}
		
		private function FindTableItem( e:MouseEvent ): ListItem
		{
			var gir:IGridItemRenderer = Utils.FindParentByType( e.target as DisplayObject, IGridItemRenderer ) as IGridItemRenderer;
			if ( gir != null )
			{
				return gir.data as ListItem;
			}
			return null;
		}
		
		public var _templatesContextMenu:Menu = null;
		private function onTemplatesContextMenu( e:MouseEvent ): void
		{
			var thisOne:Main = this;
			
			if ( _templatesContextMenu != null )
			{
				_templatesContextMenu.hide();
				_templatesContextMenu = null;
			}
			
			var menuData:Array = [ { label:"Add template...", id:"add_template" } ];
			
			var gridItemRenderer:IGridItemRenderer = Utils.FindParentByType( e.target as DisplayObject, IGridItemRenderer ) as IGridItemRenderer;
			if ( gridItemRenderer != null )
			{
				var templateTableItem:TemplateTableItem = gridItemRenderer.data as TemplateTableItem;
				if ( templateTableItem != null )
				{
					menuData = menuData.concat( [ { label: "Edit...", id: "edit", template: templateTableItem.template } ] );
				}
			}
			
			_templatesContextMenu = Menu.createMenu( null, menuData );
			_templatesContextMenu.addEventListener( MenuEvent.ITEM_CLICK, function( menuEvent:MenuEvent ): void
			{
				switch ( menuEvent.item.id )
				{
					case "add_template":
						AddTemplate();
						break;
					
					case "edit":
						editingTemplateWindow = PopUpManager.createPopUp( thisOne, EditingTemplateWindow, false ) as EditingTemplateWindow;
						editingTemplateWindow.Init( _project, menuEvent.item.template, thisOne );
						PopUpManager.centerPopUp( editingTemplateWindow );
						break;
				}
			} );
			_templatesContextMenu.show( e.stageX, e.stageY );
		}
		
		public var _compoundsContextMenu:Menu = null;
		private function onCompoundsContextMenu( e:MouseEvent ): void
		{
			var thisOne:Main = this;
			
			if ( _compoundsContextMenu != null )
			{
				_compoundsContextMenu.hide();
				_compoundsContextMenu = null;
			}
			
			var menuData:Array = [ { label:"Add compound...", id:"add_compound" } ];
			
			var gridItemRenderer:IGridItemRenderer = Utils.FindParentByType( e.target as DisplayObject, IGridItemRenderer ) as IGridItemRenderer;
			if ( gridItemRenderer != null )
			{
				var compoundTableItem:CompoundTableItem = gridItemRenderer.data as CompoundTableItem;
				if ( compoundTableItem != null )
				{
					menuData = menuData.concat( [ { label: "Edit...", id: "edit", compound: compoundTableItem.compound } ] );
				}
			}
			
			_compoundsContextMenu = Menu.createMenu( null, menuData );
			_compoundsContextMenu.addEventListener( MenuEvent.ITEM_CLICK, function( menuEvent:MenuEvent ): void
			{
				switch ( menuEvent.item.id )
				{
					case "add_compound":
						AddCompound();
						break;
					
					case "edit":
						editingTemplateWindow = PopUpManager.createPopUp( thisOne, EditingTemplateWindow, false ) as EditingTemplateWindow;
						editingTemplateWindow.Init( _project, menuEvent.item.compound, thisOne );
						PopUpManager.centerPopUp( editingTemplateWindow );
						break;
				}
			} );
			_compoundsContextMenu.show( e.stageX, e.stageY );
		}
		
		private var _mapsContextMenu:Menu = null;
		public var _singleMapContextMenu:Menu = null;
		private function onMapsContextMenu( e:MouseEvent ): void
		{
			if ( e.target is spark.components.Label )
			{
				var mapListItem:MapListItem = FindListItem( e, MapListItem ) as MapListItem;
				if ( mapListItem != null )
				{
					ShowMapContextMenu( mapListItem.map, e.stageX, e.stageY );
				}
				return;
			}
			else if ( ( e.target is DataGroup ) == false )
			{
				return;
			}
			
			if ( _mapsContextMenu != null && _mapsContextMenu.visible == true )
			{
				_mapsContextMenu.x = e.stageX;
				_mapsContextMenu.y = e.stageY;
				return;
			}
			_mapsContextMenu = Menu.createMenu( null, _mapsContextMenuData );
			_mapsContextMenu.addEventListener( MenuEvent.ITEM_CLICK, function( menuEvent:MenuEvent ): void
			{
				switch ( menuEvent.item.id )
				{
					case "add_map":
						AddMap();
						break;
				}
			} );
			_mapsContextMenu.show( e.stageX, e.stageY );
		}
		[Bindable]
		public var _mapsContextMenuData:Array =
		[
			{ label:"Add map...", id:"add_map" }
		];
		private function ShowMapContextMenu( map:Map, x:Number, y:Number ): void
		{
			var thisOne:Main = this;
			
			if ( _singleMapContextMenu != null )
			{
				_singleMapContextMenu.hide();
				_singleMapContextMenu = null;
			}
			
			_singleMapContextMenu = Menu.createMenu( null, [ { label: "Edit...", id: "edit", map: map } ] );
			_singleMapContextMenu.addEventListener( MenuEvent.ITEM_CLICK, function( singleMapMenuEvent:MenuEvent ): void
			{
				switch ( singleMapMenuEvent.item.id )
				{
					case "edit":
						var editingMapWindow:EditingMapWindow = PopUpManager.createPopUp( thisOne, EditingMapWindow, false ) as EditingMapWindow;
						editingMapWindow.Init( _project, thisOne, map );
						PopUpManager.centerPopUp( editingMapWindow );
						break;
				}
			} );
			_singleMapContextMenu.show( x, y );
		}
		
		private var _layersContextMenu:Menu = null;
		private var _singleLayerContextMenu:Menu = null;
		private function onLayersContextMenu( e:MouseEvent ): void
		{
			if ( e.target is spark.components.Label )
			{
				var label:spark.components.Label = e.target as spark.components.Label;
				var dir:DefaultItemRenderer = label.parent as DefaultItemRenderer;
				if ( dir == null )
				{
					Cc.error( "E: Main.onLayersContextMenu(): wrong expectations." );
				}
				else
				{
					var layerListItem:LayerListItem = dir.data as LayerListItem;
					if ( layerListItem == null )
					{
						Cc.error( "E: Main.onLayersContextMenu(): wrong data." );
					}
					else
					{
						ShowSingleLayerContextMenu( layerListItem, e.stageX, e.stageY );
					}
				}
				return;
			}
			else if ( ( e.target is DataGroup ) == false )
			{
				return;
			}
			
			if ( _layersContextMenu != null && _layersContextMenu.visible == true )
			{
				_layersContextMenu.x = e.stageX;
				_layersContextMenu.y = e.stageY;
				return;
			}
			_layersContextMenu = Menu.createMenu( null, _layersContextMenuData );
			_layersContextMenu.addEventListener( MenuEvent.ITEM_CLICK, function( menuEvent:MenuEvent ): void
			{
				switch ( menuEvent.item.id )
				{
					case "add_layer":
						AddLayer();
						break;
				}
			} );
			_layersContextMenu.show( e.stageX, e.stageY );
		}
		[Bindable]
		public var _layersContextMenuData:Array =
		[
			{ label:"Add layer...", id:"add_layer" }
		];
		private function ShowSingleLayerContextMenu( layerListItem:LayerListItem, x:Number, y:Number ): void
		{
			var thisOne:Main = this;
			
			if ( _singleLayerContextMenu != null )
			{
				_singleLayerContextMenu.hide();
				_singleLayerContextMenu = null;
			}
			
			var mdp:Object = [ { label: "Edit...", id: "edit", layerListItem: layerListItem } ];
			if ( layerListItem.index > 0 )
			{
				mdp.push( { label: "Move up (deeper)", id: "move_up", layerListItem: layerListItem } );
			}
			if ( layerListItem.index < ( _project._data._layers.length - 1 ) )
			{
				mdp.push( { label: "Move down (closer)", id: "move_down", layerListItem: layerListItem } );
			}
			
			_singleLayerContextMenu = Menu.createMenu( null, mdp );
			_singleLayerContextMenu.addEventListener( MenuEvent.ITEM_CLICK, function( singleLayerMenuEvent:MenuEvent ): void
			{
				var layerListItem_withinMenu:LayerListItem = singleLayerMenuEvent.item.layerListItem;
				
				switch ( singleLayerMenuEvent.item.id )
				{
					case "edit":
						var editingLayerWindow:EditingLayerWindow = PopUpManager.createPopUp( thisOne, EditingLayerWindow, false ) as EditingLayerWindow;
						editingLayerWindow.Init( _project, layerListItem_withinMenu.layer, thisOne );
						PopUpManager.centerPopUp( editingLayerWindow );
						break;
					
					case "move_up":
						const previousIndex:int = layerListItem_withinMenu.index - 1;
						var previous:Layer = _project._data._layers[ previousIndex ];
						_project._data._layers[ previousIndex ] = layerListItem_withinMenu.layer;
						_project._data._layers[ layerListItem_withinMenu.index ] = previous;
						UpdateLayersList();
						_isometry.Reinit();
						break;
					
					case "move_down":
						const nextIndex:int = layerListItem_withinMenu.index + 1;
						var next:Layer = _project._data._layers[ nextIndex ];
						_project._data._layers[ nextIndex ] = layerListItem_withinMenu.layer;
						_project._data._layers[ layerListItem_withinMenu.index ] = next;
						UpdateLayersList();
						_isometry.Reinit();
						break;
				}
			} );
			_singleLayerContextMenu.show( x, y );
		}
		
		
		private var _downComplex:TemplateTableItem = null;
		private function onTemplatesMouseDown( e:MouseEvent ): void
		{
			_downComplex = FindTableItem( e ) as TemplateTableItem
		}
		private function onTemplatesMouseUp( e:MouseEvent ): void
		{
			_downComplex = null;
		}
		private function onTemplatesMouseMove( e:MouseEvent ): void
		{
			if ( _downComplex == null )
			{
				return;
			}
			
			if ( _downComplex.template._singleResource == null )
			{
				PopUp( "Specify template's graphics first.", POP_UP_ERROR );
			}
			else if ( _downComplex.template._layer == null )
			{
				PopUp( "Specify template's layer first.", POP_UP_ERROR );
			}
			else
			{
				StartDrag( e, _downComplex.template, Global.DRAG_FORMAT_COMPLEX_TEMPLATE, _downComplex.template._singleResource.FindClass( _project ) );
			}
			
			//to ignore other mouse moves:
			_downComplex = null;
		}
		
		
		private var _downCompound:CompoundTableItem = null;
		private function onCompoundsMouseDown( e:MouseEvent ): void
		{
			_downCompound = FindTableItem( e ) as CompoundTableItem;
		}
		private function onCompoundsMouseUp( e:MouseEvent ): void
		{
			_downCompound = null;
		}
		private function onCompoundsMouseMove( e:MouseEvent ): void
		{
			if ( _downCompound == null )
			{
				return;
			}
			
			if ( _downCompound.compound._consisting.length <= 0 )
			{
				PopUp( "Specify at least one complex within chosen compound first.", POP_UP_ERROR );
			}
			else
			{
				StartDrag( e, _downCompound.compound, Global.DRAG_FORMAT_COMPOUND_TEMPLATE, _downCompound.compound._consisting[ 0 ]._complex._singleResource.FindClass( _project ) );
			}
			
			//to ignore other mouse moves:
			_downCompound = null;
		}
		
		
		private var _downUnitListItem:UnitDesc = null;
		private function onUnitsMouseDown( e:MouseEvent ): void
		{
			var unitListItem:UnitListItem = FindListItem( e, UnitListItem );
			if ( unitListItem != null )
			{
				_downUnitListItem = unitListItem.unit;
			}
		}
		private function onUnitsMouseUp( e:MouseEvent ): void
		{
			_downUnitListItem = null;
		}
		private function onUnitsMouseMove( e:MouseEvent ): void
		{
			if ( _downUnitListItem == null )
			{
				return;
			}
			
			StartDrag( e, _downUnitListItem, Global.DRAG_FORMAG_UNIT_DESC, _downUnitListItem._singleResource.FindClass( _project ) );
			
			//to ignore other mouse moves:
			_downUnitListItem = null;
		}
		
		
		public static function StartDrag( e:MouseEvent, data:Object, format:String, imageClass:Class ): void
		{
			var uiComponent:UIComponent = Utils.FindParentByType( e.target as DisplayObject, UIComponent ) as UIComponent;
			if ( uiComponent == null )
			{
				Cc.error( "E: Main.StartDrag(): failed to accomplish drag/drop quest." );
			}
			else
			{
				var dragSource:DragSource = new DragSource;
				dragSource.addData( data, format );
				
				var proxy:mx.controls.Image = new mx.controls.Image;
				proxy.source = imageClass;
				
				var viewToGlobal:Point = ( e.target as DisplayObject ).localToGlobal( new Point );
				var targetToGlobal:Point = uiComponent.localToGlobal( new Point );
				
				DragManager.doDrag( uiComponent, dragSource, e, proxy, targetToGlobal.x - viewToGlobal.x, targetToGlobal.y - viewToGlobal.y );
			}
		}
		
		
		
		public static const POP_UP_INFO:int = 1;
		public static const POP_UP_WARNING:int = 2;
		public static const POP_UP_ERROR:int = 3;
		[ Embed( source = "info_icon.png" ) ]
		private var _infoIconClass:Class;
		[ Embed( source = "warning_icon.png" ) ]
		private var _warningIconClass:Class;
		[ Embed( source = "error_icon.png" ) ]
		private var _errorIconClass:Class;
		
		public function PopUp( message:String, type:int ): void
		{
			var iconClass:Class = _infoIconClass;
			var title:String = "Info";
			switch ( type )
			{
				case POP_UP_WARNING:
					iconClass = _warningIconClass;
					title = "Warning";
					break;
				
				case POP_UP_ERROR:
					iconClass = _errorIconClass;
					title = "Error";
					break;
			}
			Alert.show( message, title, Alert.OK, null, null, iconClass );
		}
		
		public function onMenuItem( e:MenuEvent ): void
		{
			var thisOne:Main = this;
			
			switch ( e.item.@id.toString() )
			{
				/// FILE:
				
				case "open_project":
					var openingProjectFile:File = new File;
					
					openingProjectFile.addEventListener( Event.SELECT, function( e:Event ): void
					{
						projectPath = openingProjectFile.nativePath;
						
						var openingProjectFileStream:FileStream = new FileStream;
						var ok:Boolean = true;
						try
						{
							openingProjectFileStream.open( openingProjectFile, FileMode.READ );
						}
						catch ( e:Error )
						{
							PopUp( "Project file opening failed with error: " + e.message, POP_UP_ERROR );
							ok = false;
						}
						
						if ( ok )
						{
							var bytes:ByteArray = new ByteArray;
							openingProjectFileStream.readBytes( bytes );
							
							//let's try clean-up currently existing instances a little:
							_isometry.Unload();
							//TODO
							///...
							
							_project.Accept( bytes, function( errorText:String ): void
							{
								if ( errorText == null )
								{
									PopUp( "Project successfully loaded.", POP_UP_INFO );
								}
								else
								{
									PopUp( "Project file reading failed: wrong format: \"" + errorText + "\".", POP_UP_ERROR );
								}
							} );
						}
						
						openingProjectFileStream.close();
					} );
					openingProjectFile.addEventListener( IOErrorEvent.IO_ERROR, function( ioErrorEvent:IOErrorEvent ): void
					{
						PopUp( "Opening failed with error: " + ioErrorEvent.text, POP_UP_ERROR );
					} );
					openingProjectFile.addEventListener( SecurityErrorEvent.SECURITY_ERROR, function( securityErrorEvent:SecurityErrorEvent ): void
					{
						PopUp( "Opening failed with error: " + securityErrorEvent.text, POP_UP_ERROR );
					} );
					
					openingProjectFile.browse();
					break;
				
				case "save_project":
					if ( _projectPath == null )
					{
						PopUp( "Program error: no path known.", POP_UP_ERROR );
					}
					else
					{
						SaveProject( _projectPath );
					}
					break;
				
				case "save_project_as":
					var savingAsFile:File = new File;
					savingAsFile.addEventListener( Event.SELECT, function( ... args ): void
					{
						projectPath = savingAsFile.nativePath;
						
						SaveProject( _projectPath );
					} );
					savingAsFile.browse();
					break;
				
				
				///PROJECT:
				
				case "project_properties":
					var editingProjectWindow:EditingProjectWindow = PopUpManager.createPopUp( thisOne, EditingProjectWindow, false ) as EditingProjectWindow;
					editingProjectWindow.Init( _project );
					PopUpManager.centerPopUp( editingProjectWindow );
					break;
				
				
				///HELP:
				
				case "about":
					PopUp( "Isometric editor as part of \"Blisc\" engine. If you have any suggestions or issues please contact SlavMFM@gmail.com", POP_UP_INFO );
					break;
			}
		}
		
		private function set projectPath( value:String ): void
		{
			_menuBar.getMenuAt( 0 ).dataProvider[ 1 ].@enabled = true;
			
			_projectPath = value;
		}
		
		private function SaveProject( path:String ): void
		{
			var savingStream:FileStream = new FileStream;
			try
			{
				savingStream.open( new File( path ), FileMode.WRITE );
			}
			catch ( e:Error )
			{
				PopUp( "Saving failed: file \"" + path + "\" was NOT opened: " + e.message, POP_UP_ERROR );
				return;
			}
			
			savingStream.writeBytes( _project.DataToSave() );
			savingStream.close();
			PopUp( "Project file successfully saved.", POP_UP_INFO );
		}
		
		public function AddTemplate(): void
		{
			_project.AddObjectTemplate( new ComplexTemplate );
		}
		
		public function AddCompound(): void
		{
			_project.AddObjectTemplate( new CompoundTemplate );
		}
		
		public function AddMap(): void
		{
			var map:Map = new Map;
			
			_project.AddMap( map );
		}
		
		public function AddLayer(): void
		{
			_project._data._layers.push( new Layer );
			UpdateLayersList();
			
			_isometry.Reinit();
		}
		
		public function AddRegion(): void
		{
			var newRegion:Region = new Region;
			_project._data._regions.push( newRegion );
			_regions_list.dataProvider.addItem( new RegionListItem( newRegion ) );
		}
		
		public function UpdateLayersList(): void
		{
			for each ( var destroyingListItem:LayerListItem in _layers_list_data_provider.source )
			{
				destroyingListItem.Destroy();
			}
			_layers_list_data_provider.source.length = 0;
			_layers_list_data_provider.source = [];
			
			for ( var i:int = 0; i < _project._data._layers.length; ++i )
			{
				var layer:Layer = _project._data._layers[ i ];
				_layers_list_data_provider.addItem( new LayerListItem( layer._name, layer, i ) );
			}
		}
		
		private function onIsometryDragEnter( event:DragEvent ): void
		{
			_isometry.onDragEnter( event );
		}
		
		private function onIsometryDragOver( event:DragEvent ): void
		{
			_isometry.onDragOver( event );
		}
		
		private function onIsometryDragDrop( event:DragEvent ): void
		{
			_isometry.onDragDrop( event );
		}
		
		
		public function ShowObjectProperties(): void
		{
			if ( _isometry._selected == null || _isometry._selected is Unit )
			{
				_instanceProperties.enabled = false;
				return;
			}
			
			_instanceProperties.enabled = true;
			
			_objectName.text = _isometry._selected._objectInstance._template._name;
			const isoX:Number = _isometry._selected._objectInstance._tileCoords.x * _project.side;
			const isoY:Number = _isometry._selected._objectInstance._tileCoords.y * _project.side;
			_objectIsoX.text = isoX.toString();
			_objectIsoY.text = isoY.toString();
			_objectTileX.text = _isometry._selected._objectInstance._tileCoords.x.toString();
			_objectTileY.text = _isometry._selected._objectInstance._tileCoords.y.toString();
			var flat:Point = Utils.FromIso( isoX, isoY, new Point );
			_objectFlatX.text = flat.x.toString();
			_objectFlatY.text = flat.y.toString();
		}
		public function SetObjectTilePos( x:Number, y:Number ): void
		{
			if ( _isometry._selected != null )
			{
				_isometry._selected._objectInstance._tileCoords.setTo( x, y );
				_isometry._selected._view.SetTileX( x );
				_isometry._selected._view.SetTileY( y );
			}
			
			ShowObjectProperties();
		}
		private function SetObjectPosFromIso(): void
		{
			SetObjectTilePos( parseFloat( _objectIsoX.text ) / _project.side, parseFloat( _objectIsoY.text ) / _project.side );
		}
		private function onObjectIsoXChange( ... args ): void
		{
			SetObjectPosFromIso();
		}
		private function onObjectIsoYChange( ... args ): void
		{
			SetObjectPosFromIso();
		}
		private function SetObjectPosFromTile(): void
		{
			SetObjectTilePos( parseFloat( _objectTileX.text ), parseFloat( _objectTileY.text ) );
		}
		private function onObjectTileXChange( ... args ): void
		{
			SetObjectPosFromTile();
		}
		private function onObjectTileYChange( ... args ): void
		{
			SetObjectPosFromTile();
		}
		private function SetObjectPosFromFlat(): void
		{
			var iso:Point = Utils.ToIso( parseFloat( _objectFlatX.text ), parseFloat( _objectFlatY.text ), new Point );
			SetObjectTilePos( iso.x, iso.y );
		}
		private function onObjectFlatXChange( ... args ): void
		{
			SetObjectPosFromFlat();
		}
		private function onObjectFlatYChange( ... args ): void
		{
			SetObjectPosFromFlat();
		}
		
		
		private function onRegionChoice( e:IndexChangeEvent ): void
		{
			trace( "region" );
		}
		
		public var _regionContextMenu:Menu = null;
		private function onRegionContextMenu( e:MouseEvent ): void
		{
			var thisOne:Main = this;
			
			if ( _regionContextMenu != null )
			{
				_regionContextMenu.hide();
				_regionContextMenu = null;
			}
			
			var menuData:Array = [ { label:"Add region...", id:"add_region" } ];
			var regionListItem:RegionListItem = FindListItem( e, RegionListItem ) as RegionListItem;
			if ( regionListItem != null )
			{
				menuData = menuData.concat( [ { label: "Edit...", id: "edit", region: regionListItem.region } ] );
			}
			
			_regionContextMenu = Menu.createMenu( null, menuData );
			_regionContextMenu.addEventListener( MenuEvent.ITEM_CLICK, function( menuEvent:MenuEvent ): void
			{
				switch ( menuEvent.item.id )
				{
					case "add_region":
						AddRegion();
						break;
					
					case "edit":
						var editingRegionWindow:EditingRegionWindow = PopUpManager.createPopUp( thisOne, EditingRegionWindow, false ) as EditingRegionWindow;
						editingRegionWindow.Init( _project, menuEvent.item.region, thisOne );
						PopUpManager.centerPopUp( editingRegionWindow );
						break;
				}
			} );
			_regionContextMenu.show( e.stageX, e.stageY );
		}
		
		
		private function onDrawBorderFlagChange( ... args ): void
		{
			if ( _isometry.displaying == null )
			{
				return;
			}
			
			_isometry.displaying._drawBorder = _drawBorder.selected;
		}
		private function onDrawGridFlagChange( ... args ): void
		{
			if ( _isometry.displaying == null )
			{
				return;
			}
			
			_isometry.displaying._drawGrid = _drawGrid.selected;
		}
		
		private function onClampToTileFlagChange( ... args ): void
		{
			if ( _isometry.displaying == null )
			{
				return;
			}
			
			_isometry.displaying._clampToTiles = _clampToTile.selected;
		}
		
		private function onUnitsSpeedChange( ... args ): void
		{
			if ( _isometry.displaying == null )
			{
				return;
			}
			
			_isometry.displaying._unitsSpeed = parseFloat( _unitsSpeed.text );
		}
		
		
		
		private function onResourcesPreviewHolderResize( ... args ): void
		{
			_resourcesPreview.Resize( _resources_preview_holder.width, _resources_preview_holder.height );
		}
		
		
		private function SetScale( value:Number ): void
		{
			if ( _isometry._blisc != null )
			{
				_isometry._blisc.zoom = value;
			}
		}
		private function onScale_1( ... args ): void
		{
			SetScale( 1 );
		}
		private function onScale_2( ... args ): void
		{
			SetScale( 1 / 2 );
		}
		private function onScale_3( ... args ): void
		{
			SetScale( 1 / 3 );
		}
		private function onScale_4( ... args ): void
		{
			SetScale( 1 / 4 );
		}
		
		
		private function onReloadMap( ... args ): void
		{
			_isometry.Reinit();
			_reloadMapButton.enabled = false;
		}
		
		
		]]>
	</fx:Script>
	
</s:Application>

